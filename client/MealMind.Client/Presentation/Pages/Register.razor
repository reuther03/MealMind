@page "/register"
@using System.ComponentModel.DataAnnotations
@using MealMind.Client.Application.State
@using MealMind.Client.Infrastructure.Abstractions
@using MealMind.Shared.Contracts.Types
@inject AuthState AuthState
@inject IApiClient ApiClient
@inject NavigationManager Navigation
<h1>Register</h1>

<EditForm Model="@_model" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div>
        <label>Username:</label>
        <InputText @bind-Value="_model.Username"/>
    </div>

    <div>
        <label>Email:</label>
        <InputText @bind-Value="_model.Email"/>
    </div>

    <div>
        <label>Password:</label>
        <InputText @bind-Value="_model.Password" type="password"/>
    </div>

    <div>
        <label>Gender</label>
        <InputSelect @bind-Value="_model.Gender">
            @foreach (var gender in Enum.GetValues(typeof(Gender)))
            {
                <option value="@gender">@gender</option>
            }
        </InputSelect>
    </div>

    <div>
        <label>Date of birth:</label>
        <InputDate @bind-Value="_model.DateOfBirth"/>
    </div>

    <div>
        <label>Weight</label>
        <InputNumber @bind-Value="_model.Weight"/>
    </div>

    <div>
        <label>Height</label>
        <InputNumber @bind-Value="_model.Height"/>
    </div>

    <div>
        <label>Weight target</label>
        <InputNumber @bind-Value="_model.WeightTarget"/>
    </div>

    <div>
        <label>Activity Level</label>
        <InputSelect @bind-Value="_model.ActivityLevel">
            @foreach (var activity in Enum.GetValues(typeof(ActivityLevel)))
            {
                <option value="@activity">@activity</option>
            }
        </InputSelect>
    </div>


    <button type="submit" disabled="@_isLoading">
        @(_isLoading ? "Loading..." : "Login")
    </button>
</EditForm>

@if (_errorMessage is not null)
{
    <p style="color: red;">@_errorMessage</p>
}

@code {
    private readonly RegisterModel _model = new();
    private bool _isLoading;
    private string? _errorMessage;

    private async Task HandleRegister()
    {
        _isLoading = true;
        _errorMessage = null;

        try
        {
            var result = await ApiClient.PostAsync<Guid>("/sign-up", new
            {
                username = _model.Username,
                email = _model.Email,
                inputPassword = _model.Password,
                personalData = new
                {
                    gender = _model.Gender,
                    dateOfBirth = _model.DateOfBirth,
                    weight = _model.Weight,
                    height = _model.Height,
                    weightTarget = _model.WeightTarget,
                    activityLevel = _model.ActivityLevel
                }
            });

            if (result is { IsSuccess: false })
                _errorMessage = result.Message;

            else
            {
                Navigation.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
        }
    }

    public class RegisterModel
    {
        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; } = "";

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Password is required")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Required]
        public Gender Gender { get; set; }

        [Required]
        public DateOnly DateOfBirth { get; set; }

        [Required]
        [Range(0.1, double.MaxValue, ErrorMessage = "Weight must be greater than 0")]
        public double Weight { get; set; }

        [Required]
        [Range(0.1, double.MaxValue, ErrorMessage = "Height must be greater than 0")]
        public double Height { get; set; }

        [Required]
        [Range(0.1, double.MaxValue, ErrorMessage = "Weight target must be greater than 0")]
        public double WeightTarget { get; set; }

        [Required]
        public ActivityLevel ActivityLevel { get; set; }
    }

}