// <auto-generated />
using System;
using MealMind.Modules.Nutrition.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MealMind.Modules.Nutrition.Infrastructure.Database.Migrations
{
    [DbContext(typeof(NutritionDbContext))]
    [Migration("20250916164155_AddedDailyLog")]
    partial class AddedDailyLog
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("nutrition")
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MealMind.Modules.Nutrition.Domain.Food.Food", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Barcode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Brand")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Barcode")
                        .IsUnique();

                    b.ToTable("Food", "nutrition");
                });

            modelBuilder.Entity("MealMind.Modules.Nutrition.Domain.Food.FoodCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("FoodId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("FoodId", "Category")
                        .IsUnique();

                    b.ToTable("FoodCategories", "nutrition");
                });

            modelBuilder.Entity("MealMind.Modules.Nutrition.Domain.Food.FoodDietaryTag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("DietaryTag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("FoodId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("FoodId", "DietaryTag")
                        .IsUnique();

                    b.ToTable("FoodDietaryTags", "nutrition");
                });

            modelBuilder.Entity("MealMind.Modules.Nutrition.Domain.Tracking.DailyLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("CaloriesGoal")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.Property<DateOnly>("CurrentDate")
                        .HasColumnType("date");

                    b.Property<decimal>("CurrentWeight")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("DailyLog", "nutrition");
                });

            modelBuilder.Entity("MealMind.Modules.Nutrition.Domain.Tracking.FoodEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("FoodBrand")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("FoodId")
                        .HasColumnType("uuid");

                    b.Property<string>("FoodName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MealId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("QuantityInGrams")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)");

                    b.Property<decimal>("TotalCalories")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)");

                    b.Property<decimal>("TotalCarbohydrates")
                        .HasPrecision(6, 2)
                        .HasColumnType("numeric(6,2)");

                    b.Property<decimal>("TotalFats")
                        .HasPrecision(6, 2)
                        .HasColumnType("numeric(6,2)");

                    b.Property<decimal>("TotalFiber")
                        .HasPrecision(6, 2)
                        .HasColumnType("numeric(6,2)");

                    b.Property<decimal>("TotalProteins")
                        .HasPrecision(6, 2)
                        .HasColumnType("numeric(6,2)");

                    b.Property<decimal>("TotalSaturatedFats")
                        .HasPrecision(6, 2)
                        .HasColumnType("numeric(6,2)");

                    b.Property<decimal>("TotalSodium")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)");

                    b.Property<decimal>("TotalSugars")
                        .HasPrecision(6, 2)
                        .HasColumnType("numeric(6,2)");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.ToTable("FoodEntry", "nutrition");
                });

            modelBuilder.Entity("MealMind.Modules.Nutrition.Domain.Tracking.Meal", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ConsumedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DailyLogId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MealType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DailyLogId");

                    b.ToTable("Meal", "nutrition");
                });

            modelBuilder.Entity("MealMind.Modules.Nutrition.Domain.UserProfile.NutritionTarget", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Calories")
                        .HasPrecision(8, 2)
                        .HasColumnType("numeric(8,2)");

                    b.Property<decimal>("CarbohydratesGrams")
                        .HasPrecision(6, 2)
                        .HasColumnType("numeric(6,2)");

                    b.Property<DateOnly?>("DeactivatedAt")
                        .HasColumnType("date");

                    b.Property<decimal>("FatsGrams")
                        .HasPrecision(6, 2)
                        .HasColumnType("numeric(6,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal>("ProteinGrams")
                        .HasPrecision(6, 2)
                        .HasColumnType("numeric(6,2)");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("WaterIntake")
                        .HasPrecision(6, 2)
                        .HasColumnType("numeric(6,2)");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("NutritionTarget", "nutrition");
                });

            modelBuilder.Entity("MealMind.Modules.Nutrition.Domain.UserProfile.NutritionTargetActiveDays", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("NutritionTargetId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("NutritionTargetId", "DayOfWeek")
                        .IsUnique();

                    b.ToTable("NutritionTargetActiveDays", "nutrition");
                });

            modelBuilder.Entity("MealMind.Modules.Nutrition.Domain.UserProfile.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("UserProfile", "nutrition");
                });

            modelBuilder.Entity("MealMind.Modules.Nutrition.Domain.Food.Food", b =>
                {
                    b.OwnsOne("MealMind.Modules.Nutrition.Domain.Food.NutritionPer100G", "NutritionPer100G", b1 =>
                        {
                            b1.Property<Guid>("FoodId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Calories")
                                .HasPrecision(8, 2)
                                .HasColumnType("numeric(8,2)");

                            b1.Property<decimal>("Carbohydrates")
                                .HasPrecision(6, 2)
                                .HasColumnType("numeric(6,2)");

                            b1.Property<decimal?>("Cholesterol")
                                .HasPrecision(6, 2)
                                .HasColumnType("numeric(6,2)");

                            b1.Property<decimal>("Fat")
                                .HasPrecision(6, 2)
                                .HasColumnType("numeric(6,2)");

                            b1.Property<decimal?>("Fiber")
                                .HasPrecision(6, 2)
                                .HasColumnType("numeric(6,2)");

                            b1.Property<decimal>("Protein")
                                .HasPrecision(6, 2)
                                .HasColumnType("numeric(6,2)");

                            b1.Property<decimal?>("SaturatedFat")
                                .HasPrecision(6, 2)
                                .HasColumnType("numeric(6,2)");

                            b1.Property<decimal?>("Sodium")
                                .HasPrecision(8, 2)
                                .HasColumnType("numeric(8,2)");

                            b1.Property<decimal?>("Sugar")
                                .HasPrecision(6, 2)
                                .HasColumnType("numeric(6,2)");

                            b1.HasKey("FoodId");

                            b1.ToTable("NutritionPer100G", "nutrition");

                            b1.WithOwner()
                                .HasForeignKey("FoodId");
                        });

                    b.Navigation("NutritionPer100G")
                        .IsRequired();
                });

            modelBuilder.Entity("MealMind.Modules.Nutrition.Domain.Food.FoodCategory", b =>
                {
                    b.HasOne("MealMind.Modules.Nutrition.Domain.Food.Food", null)
                        .WithMany("Categories")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MealMind.Modules.Nutrition.Domain.Food.FoodDietaryTag", b =>
                {
                    b.HasOne("MealMind.Modules.Nutrition.Domain.Food.Food", null)
                        .WithMany("DietaryTags")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MealMind.Modules.Nutrition.Domain.Tracking.FoodEntry", b =>
                {
                    b.HasOne("MealMind.Modules.Nutrition.Domain.Tracking.Meal", null)
                        .WithMany("Foods")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MealMind.Modules.Nutrition.Domain.Tracking.Meal", b =>
                {
                    b.HasOne("MealMind.Modules.Nutrition.Domain.Tracking.DailyLog", null)
                        .WithMany("Meals")
                        .HasForeignKey("DailyLogId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MealMind.Modules.Nutrition.Domain.UserProfile.NutritionTarget", b =>
                {
                    b.HasOne("MealMind.Modules.Nutrition.Domain.UserProfile.UserProfile", null)
                        .WithMany("NutritionTargets")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MealMind.Modules.Nutrition.Domain.UserProfile.NutritionTargetActiveDays", b =>
                {
                    b.HasOne("MealMind.Modules.Nutrition.Domain.UserProfile.NutritionTarget", null)
                        .WithMany("ActiveDays")
                        .HasForeignKey("NutritionTargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MealMind.Modules.Nutrition.Domain.UserProfile.UserProfile", b =>
                {
                    b.OwnsOne("MealMind.Modules.Nutrition.Domain.UserProfile.PersonalData", "PersonalData", b1 =>
                        {
                            b1.Property<Guid>("UserProfileId")
                                .HasColumnType("uuid");

                            b1.Property<string>("ActivityLevel")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ActivityLevel");

                            b1.Property<DateOnly>("DateOfBirth")
                                .HasColumnType("date")
                                .HasColumnName("DateOfBirth");

                            b1.Property<string>("Gender")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Gender");

                            b1.Property<decimal>("Height")
                                .HasPrecision(5, 2)
                                .HasColumnType("numeric(5,2)")
                                .HasColumnName("Height");

                            b1.Property<decimal>("Weight")
                                .HasPrecision(6, 2)
                                .HasColumnType("numeric(6,2)")
                                .HasColumnName("Weight");

                            b1.Property<decimal>("WeightTarget")
                                .HasPrecision(6, 2)
                                .HasColumnType("numeric(6,2)")
                                .HasColumnName("WeightTarget");

                            b1.HasKey("UserProfileId");

                            b1.ToTable("UserProfile_PersonalData", "nutrition");

                            b1.WithOwner()
                                .HasForeignKey("UserProfileId");
                        });

                    b.Navigation("PersonalData")
                        .IsRequired();
                });

            modelBuilder.Entity("MealMind.Modules.Nutrition.Domain.Food.Food", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("DietaryTags");
                });

            modelBuilder.Entity("MealMind.Modules.Nutrition.Domain.Tracking.DailyLog", b =>
                {
                    b.Navigation("Meals");
                });

            modelBuilder.Entity("MealMind.Modules.Nutrition.Domain.Tracking.Meal", b =>
                {
                    b.Navigation("Foods");
                });

            modelBuilder.Entity("MealMind.Modules.Nutrition.Domain.UserProfile.NutritionTarget", b =>
                {
                    b.Navigation("ActiveDays");
                });

            modelBuilder.Entity("MealMind.Modules.Nutrition.Domain.UserProfile.UserProfile", b =>
                {
                    b.Navigation("NutritionTargets");
                });
#pragma warning restore 612, 618
        }
    }
}
