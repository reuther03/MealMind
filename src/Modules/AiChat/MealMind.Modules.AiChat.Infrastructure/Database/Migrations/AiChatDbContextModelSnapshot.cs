// <auto-generated />
using System;
using MealMind.Modules.AiChat.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pgvector;

#nullable disable

namespace MealMind.Modules.AiChat.Infrastructure.Database.Migrations
{
    [DbContext(typeof(AiChatDbContext))]
    partial class AiChatDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("aichat")
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "vector");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MealMind.Modules.AiChat.Domain.AiChatUser.AiChatUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("ActiveConversations")
                        .HasColumnType("integer");

                    b.Property<bool>("CanExportData")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanUseAdvancedPrompts")
                        .HasColumnType("boolean");

                    b.Property<int>("ConversationsLimit")
                        .HasColumnType("integer");

                    b.Property<int>("ConversationsMessagesHistoryDaysLimit")
                        .HasColumnType("integer");

                    b.Property<int>("DailyPromptsLimit")
                        .HasColumnType("integer");

                    b.Property<int>("DocumentsLimit")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("PromptTokensLimit")
                        .HasColumnType("integer");

                    b.Property<int>("ResponseTokensLimit")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Tier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AiChatUsers", "aichat");
                });

            modelBuilder.Entity("MealMind.Modules.AiChat.Domain.Conversation.AiChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReplyToMessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId", "CreatedAt");

                    b.ToTable("ChatMessages", "aichat");
                });

            modelBuilder.Entity("MealMind.Modules.AiChat.Domain.Conversation.Conversation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUsedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "LastUsedAt");

                    b.ToTable("ChatConversations", "aichat");
                });

            modelBuilder.Entity("MealMind.Modules.AiChat.Domain.Rag.ConversationDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AttachedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ChunkIndex")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DocumentGroupId")
                        .HasColumnType("uuid");

                    b.Property<Vector>("Embedding")
                        .HasColumnType("vector(1024)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Embedding");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Embedding"), "hnsw");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("Embedding"), new[] { "vector_cosine_ops" });

                    b.HasIndex("ConversationId", "DocumentGroupId", "ChunkIndex");

                    b.ToTable("ConversationDocuments", "aichat");
                });

            modelBuilder.Entity("MealMind.Modules.AiChat.Domain.Rag.RagDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AttachedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ChunkIndex")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<Guid>("DocumentGroupId")
                        .HasColumnType("uuid");

                    b.Property<Vector>("Embedding")
                        .HasColumnType("vector(1024)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("Embedding");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Embedding"), "hnsw");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("Embedding"), new[] { "vector_cosine_ops" });

                    b.HasIndex("DocumentGroupId", "ChunkIndex");

                    b.ToTable("RagDocuments", "aichat");
                });

            modelBuilder.Entity("MealMind.Modules.AiChat.Domain.Conversation.AiChatMessage", b =>
                {
                    b.HasOne("MealMind.Modules.AiChat.Domain.Conversation.Conversation", null)
                        .WithMany("ChatMessages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MealMind.Modules.AiChat.Domain.Conversation.Conversation", b =>
                {
                    b.Navigation("ChatMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
